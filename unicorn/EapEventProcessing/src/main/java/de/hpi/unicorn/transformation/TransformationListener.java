/*******************************************************************************
 *
 * Copyright (c) 2012-2015, Business Process Technology (BPT),
 * http://bpt.hpi.uni-potsdam.de. 
 * All Rights Reserved.
 *
 *******************************************************************************/
package de.hpi.unicorn.transformation;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.xerces.dom.ElementImpl;
import org.w3c.dom.Node;

import com.espertech.esper.client.EventBean;
import com.espertech.esper.client.UpdateListener;
import com.espertech.esper.event.xml.XMLEventBean;

import de.hpi.unicorn.event.EapEvent;
import de.hpi.unicorn.event.EapEventType;
import de.hpi.unicorn.event.attribute.AttributeTypeEnum;
import de.hpi.unicorn.event.attribute.TypeTreeNode;
import de.hpi.unicorn.eventhandling.Broker;
import de.hpi.unicorn.utils.DateUtils;

/**
 * Listener for events generated by the data stream management system.
 */
public class TransformationListener implements UpdateListener {
	private final EapEventType eventType;
	private int numberOfEventsFired;
	private HashSet<Object> uniqueEvents;

	public TransformationListener(final EapEventType eventType) {
		this.eventType = eventType;
		this.numberOfEventsFired = 0;
	}

	/**
	 * Normalizes the transformed events and sends them to the broker.
	 * 
	 * @see UpdateListener#update(EventBean[], EventBean[])
	 */
	@Override
	public void update(final EventBean[] newData, final EventBean[] oldData) {

		this.uniqueEvents = new HashSet<Object>();

//		 create event/attribute values for event type
		 for (EventBean data : newData) {
		
		//TODO: CHeck because this avoids UNICORN to match all events that fit to the query!
//		final EventBean data = newData[newData.length - 1]; // [Integration Bug
															// #416]
		// System.out.println("Event received: " + data.getUnderlying());
		if (data.getUnderlying() instanceof ElementImpl) {
			this.addEvent((ElementImpl) data.getUnderlying());
		} else if (data.getUnderlying() instanceof HashMap) {
			final Map<String, Serializable> attributeExpressionsAndValues = (Map<String, Serializable>) data
					.getUnderlying();
			for (final Object value : attributeExpressionsAndValues.values()) {
				if (value instanceof XMLEventBean) {
					final XMLEventBean bean = (XMLEventBean) value;
					if (bean.getUnderlying() instanceof ElementImpl) {
						this.addEvent((ElementImpl) bean.getUnderlying());
					}
				} else {
					this.addEvent(attributeExpressionsAndValues);
				}
			}
		}
		 }
		this.uniqueEvents.clear();
	}

	private void addEvent(final ElementImpl input) {
		final Map<String, Serializable> intermediateValues = new HashMap<String, Serializable>();
		for (int k = 0; k < input.getChildNodes().getLength(); k++) {
			final Node node = input.getChildNodes().item(k);
			intermediateValues.put(node.getNodeName(), node.getFirstChild().getNodeValue());
		}
		this.addEvent(intermediateValues);
	}

	private void addEvent(final Map<String, Serializable> input) {
		if (!this.uniqueEvents.contains(input)) {
			final Map<String, Serializable> values = new HashMap<String, Serializable>();

			for (final TypeTreeNode attribute : this.eventType.getRootLevelValueTypes()) {
				try {
					final String attributeExpression = attribute.getAttributeExpression();
					Serializable attributeValue = null;
					if (input.get(attributeExpression) != null) {
						if (attribute.getType() == AttributeTypeEnum.DATE) {
							if (input.get(attributeExpression) instanceof String) {
								attributeValue = DateUtils.parseDate((String) input.get(attributeExpression));
							} else if (input.get(attributeExpression) instanceof Double) {
								attributeValue = DateUtil.getJavaDate((Double) input.get(attributeExpression));
							} else if (input.get(attributeExpression) instanceof Long) {
								attributeValue = DateUtil.getJavaDate((Long) input.get(attributeExpression));
							} else {
								attributeValue = input.get(attributeExpression);
							}
						} else if (attribute.getType() == AttributeTypeEnum.INTEGER) {
							if (input.get(attributeExpression) instanceof Long) {
								attributeValue = ((Long) input.get(attributeExpression)).longValue();
							} else if (input.get(attributeExpression) instanceof Double) {
								attributeValue = ((Double) input.get(attributeExpression)).longValue();
							} else if (input.get(attributeExpression) instanceof Integer) {
								attributeValue = ((Integer) input.get(attributeExpression)).longValue();
							} else {
								attributeValue = (new Long(((String) input.get(attributeExpression)))).longValue();
							}
						} else if (attribute.getType() == AttributeTypeEnum.FLOAT) {
							if (input.get(attributeExpression) instanceof Long) {
								attributeValue = ((Long) input.get(attributeExpression)).doubleValue();
							} else if (input.get(attributeExpression) instanceof Double) {
								attributeValue = ((Double) input.get(attributeExpression)).doubleValue();
							} else if (input.get(attributeExpression) instanceof Integer) {
								attributeValue = ((Integer) input.get(attributeExpression)).doubleValue();
							} else {
								attributeValue = (new Double(((String) input.get(attributeExpression)))).doubleValue();
							}
						} else {
							attributeValue = input.get(attributeExpression).toString();
						}
					}
					values.put(attributeExpression, attributeValue);
				} catch (final Exception e) {
					e.printStackTrace();
				}
			}

			// System.out.println(values.toString());
			final EapEvent event = new EapEvent(this.eventType, new Date(), values);

			final Object timestamp = input.get(event.getEventType().getTimestampName());
			if (timestamp instanceof Date) {
				event.setTimestamp((Date) timestamp);
			}

			Broker.getEventImporter().importEvent(event);
			// System.out.println("Event created: " + event);
			this.numberOfEventsFired++;
			this.uniqueEvents.add(input);
		}
	}

	public int getNumberOfEventsFired() {
		return this.numberOfEventsFired;
	}

	public void setNumberOfEventsFired(final int numberOfEventsFired) {
		this.numberOfEventsFired = numberOfEventsFired;
	}

}
